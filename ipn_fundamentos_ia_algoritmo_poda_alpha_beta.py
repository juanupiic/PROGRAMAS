# -*- coding: utf-8 -*-
"""IPN_Fundamentos_IA_Algoritmo_Poda_Alpha_Beta.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1HIVXKWs01oyfQ28Rp-kkmpGECa5MZjHr

NOMBRE: LUIS FERNANDO GALEANO MARTINEZ
MATERIA:Fundamentos de inteligencia artificial
Introducción: El código proporcionado implementa un juego de tic-tac-toe  en Python, donde el jugador "X" juega contra una inteligencia artificial que utiliza el algoritmo minimax para tomar decisiones. El juego se desarrolla en un tablero de 3x3, y los jugadores alternan turnos hasta que uno de ellos gana o se llena el tablero, declarándose empate.
Conclusiones: La función evaluar_estado realiza una evaluación simple del estado actual del tablero, identificando si hay un ganador, un empate o si el juego aún no ha concluido. Utiliza la función minimax para prever movimientos futuros y tomar decisiones informadas.

El algoritmo minimax es un algoritmo de búsqueda en árbol que evalúa todas las posibles jugadas, asignando un valor a cada estado del juego. Minimax busca el mejor movimiento para el jugador maximizador y el peor para el minimizador, asumiendo que ambos jugadores juegan de manera óptima.
Bibliografía:

Russell, S., & Norvig, P. (2010). Artificial Intelligence: A Modern Approach (3rd ed.). Pearson.

ECHO POR EL EQUIPO DE: LUIS FERNANDO GALEANO MARTINEZ  Y JUAN MANUEL GALINDO CORTES
"""

import math

def imprimir_tablero(tablero):
    for fila in tablero:
        print(" ".join(fila))
    print()

def es_tablero_lleno(tablero):
    for fila in tablero:
        if " " in fila:
            return False
    return True

def evaluar_estado(tablero):
    # Evaluación simple para el tic-tac-toe
    ganador = None
    # Filas
    for fila in tablero:
        if fila.count("X") == 3:
            ganador = "X"
        elif fila.count("O") == 3:
            ganador = "O"
    # Columnas
    for col in range(3):
        if tablero[0][col] == tablero[1][col] == tablero[2][col] and tablero[0][col] != " ":
            ganador = tablero[0][col]
    # Diagonales
    if tablero[0][0] == tablero[1][1] == tablero[2][2] and tablero[0][0] != " ":
        ganador = tablero[0][0]
    if tablero[0][2] == tablero[1][1] == tablero[2][0] and tablero[0][2] != " ":
        ganador = tablero[0][2]

    if ganador == "X":
        return 1
    elif ganador == "O":
        return -1
    elif es_tablero_lleno(tablero):
        return 0
    else:
        return None

def minimax(tablero, profundidad, es_maximizando):
    estado_actual = evaluar_estado(tablero)

    if estado_actual is not None:
        return estado_actual

    if es_maximizando:
        mejor_valor = -math.inf
        for i in range(3):
            for j in range(3):
                if tablero[i][j] == " ":
                    tablero[i][j] = "X"
                    valor = minimax(tablero, profundidad + 1, False)
                    tablero[i][j] = " "
                    mejor_valor = max(mejor_valor, valor)
        return mejor_valor
    else:
        mejor_valor = math.inf
        for i in range(3):
            for j in range(3):
                if tablero[i][j] == " ":
                    tablero[i][j] = "O"
                    valor = minimax(tablero, profundidad + 1, True)
                    tablero[i][j] = " "
                    mejor_valor = min(mejor_valor, valor)
        return mejor_valor

def mejor_movimiento(tablero):
    mejor_valor = -math.inf
    mejor_mov = None

    for i in range(3):
        for j in range(3):
            if tablero[i][j] == " ":
                tablero[i][j] = "X"
                valor = minimax(tablero, 0, False)
                tablero[i][j] = " "

                if valor > mejor_valor:
                    mejor_valor = valor
                    mejor_mov = (i, j)

    return mejor_mov

# Ejemplo de uso con tic-tac-toe
tablero_inicial = [
    [" ", " ", " "],
    [" ", " ", " "],
    [" ", " ", " "]
]

turno = "X"

while evaluar_estado(tablero_inicial) is None and not es_tablero_lleno(tablero_inicial):
    imprimir_tablero(tablero_inicial)

    if turno == "X":
        fila, col = map(int, input("Turno de X. Ingrese fila y columna (separadas por espacio): ").split())
        if tablero_inicial[fila][col] == " ":
            tablero_inicial[fila][col] = "X"
        else:
            print("Casilla ocupada. Intenta de nuevo.")
            continue
    else:
        print("Turno de O (IA)")
        movimiento = mejor_movimiento(tablero_inicial)
        fila, col = movimiento
        tablero_inicial[fila][col] = "O"

    turno = "O" if turno == "X" else "X"

imprimir_tablero(tablero_inicial)
resultado = evaluar_estado(tablero_inicial)

if resultado == 1:
    print("¡X gana!")
elif resultado == -1:
    print("¡O gana!")
else:
    print("¡Empate!")

import math

def imprimir_tablero(tablero):
    for fila in tablero:
        print(" ".join(fila))
    print()

def es_tablero_lleno(tablero):
    for fila in tablero:
        if " " in fila:
            return False
    return True

def evaluar_estado(tablero):
    # Evaluación para Cuatro en Línea
    for i in range(3):
        for j in range(4):
            if tablero[i][j] == tablero[i][j + 1] == tablero[i][j + 2] == tablero[i][j + 3] and tablero[i][j] != " ":
                return 1 if tablero[i][j] == "X" else -1

    for i in range(4):
        for j in range(3):
            if tablero[i][j] == tablero[i + 1][j] == tablero[i + 2][j] == tablero[i + 3][j] and tablero[i][j] != " ":
                return 1 if tablero[i][j] == "X" else -1

    for i in range(3):
        for j in range(4):
            if tablero[i][j] == tablero[i + 1][j + 1] == tablero[i + 2][j + 2] == tablero[i + 3][j + 3] and tablero[i][j] != " ":
                return 1 if tablero[i][j] == "X" else -1

            if tablero[i + 3][j] == tablero[i + 2][j + 1] == tablero[i + 1][j + 2] == tablero[i][j + 3] and tablero[i + 3][j] != " ":
                return 1 if tablero[i + 3][j] == "X" else -1

    if es_tablero_lleno(tablero):
        return 0

    return None

def minimax(tablero, profundidad, es_maximizando):
    estado_actual = evaluar_estado(tablero)

    if estado_actual is not None:
        return estado_actual

    if es_maximizando:
        mejor_valor = -math.inf
        for i in range(4):
            for j in range(4):
                if tablero[i][j] == " ":
                    tablero[i][j] = "X"
                    valor = minimax(tablero, profundidad + 1, False)
                    tablero[i][j] = " "
                    mejor_valor = max(mejor_valor, valor)
        return mejor_valor
    else:
        mejor_valor = math.inf
        for i in range(4):
            for j in range(4):
                if tablero[i][j] == " ":
                    tablero[i][j] = "O"
                    valor = minimax(tablero, profundidad + 1, True)
                    tablero[i][j] = " "
                    mejor_valor = min(mejor_valor, valor)
        return mejor_valor

def mejor_movimiento(tablero):
    mejor_valor = -math.inf
    mejor_mov = None

    for i in range(4):
        for j in range(4):
            if tablero[i][j] == " ":
                tablero[i][j] = "X"
                valor = minimax(tablero, 0, False)
                tablero[i][j] = " "

                if valor > mejor_valor:
                    mejor_valor = valor
                    mejor_mov = (i, j)

    return mejor_mov

# Ejemplo de uso con Cuatro en Línea
tablero_inicial = [
    [" ", " ", " ", " "],
    [" ", " ", " ", " "],
    [" ", " ", " ", " "],
    [" ", " ", " ", " "]
]

turno = "X"

while evaluar_estado(tablero_inicial) is None and not es_tablero_lleno(tablero_inicial):
    imprimir_tablero(tablero_inicial)

    if turno == "X":
        fila, col = map(int, input("Turno de X. Ingrese fila y columna (separadas por espacio): ").split())
        if tablero_inicial[fila][col] == " ":
            tablero_inicial[fila][col] = "X"
        else:
            print("Casilla ocupada. Intenta de nuevo.")
            continue
    else:
        print("Turno de O (IA)")
        movimiento = mejor_movimiento(tablero_inicial)
        fila, col = movimiento
        tablero_inicial[fila][col] = "O"

    turno = "O" if turno == "X" else "X"

imprimir_tablero(tablero_inicial)
resultado = evaluar_estado(tablero_inicial)

if resultado == 1:
    print("¡X gana!")
elif resultado == -1:
    print("¡O gana!")
else:
    print("¡Empate!")